// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'gradleScript/dependencies.gradle'

buildscript {
    ext.kotlin_version = '1.2.31'
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:3.2.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath "io.realm:realm-gradle-plugin:4.2.0"
        classpath 'com.apollographql.apollo:apollo-gradle-plugin:0.4.4'
        classpath('com.google.firebase:firebase-plugins:1.1.0') {
            exclude group: 'com.google.guava', module: 'guava-jdk5'
        }
        classpath 'com.uber:okbuck:0.33.0'


        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url "$rootDir/app/src/main/js/node_modules/react-native/android" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


apply plugin: 'com.uber.okbuck'

project.ext.preDexLibraries = !deps.build.ci

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibraries
        } else if ("com.android.build.gradle.LibraryPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibraries
        }
    }

    tasks.create("buildCheck") {
        dependsOn 'findbugs'
        dependsOn 'lint'
        dependsOn 'pmd'
        dependsOn 'testCoverage'
    }

}
